% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loco.roo.R
\name{loco.roo.surv}
\alias{loco.roo.surv}
\title{Variable importance (local) via excess test error, extended to right-
censored data}
\usage{
loco.roo.surv(
  x,
  t,
  d,
  tau,
  train.fun,
  predict.fun,
  w = NULL,
  cens.model = "km",
  vars = 0,
  alpha = 0.1,
  mad.train.fun = NULL,
  mad.predict.fun = NULL,
  split = NULL,
  seed = NULL,
  out.roo.surv = NULL,
  verbose = FALSE
)
}
\arguments{
\item{x}{Matrix of variables, of dimension (say) n x p.}

\item{t}{Vector of responses (observed times), of length (say) n.}

\item{d}{Vector of responses (censoring indicator), of length (say) n.}

\item{tau}{Horizon of time.}

\item{train.fun}{A function to perform model training, i.e., to produce an
estimator of E(min(T*,tau)|X), the conditional expectation of the true 
event time T* given features X. Its input arguments should be x: matrix of 
features, t: vector of observed times, d: vector of censoring indicators
and tau: horizon of time. train.fun can be a function performing model 
training for several (say m) regression models.}

\item{predict.fun}{A function to perform prediction for the (mean of the)
responses at new feature values. Its input arguments should be out: output
produced by train.fun, and newx: feature values at which we want to make
predictions.}

\item{w}{Censoring weights. This should be a vector of length n. Default is 
NULL, in which case censoring weights are computed using the censoring 
model specified by the parameter cens.model, or by default with the 
Kaplan-Meier model.}

\item{cens.model}{Model used to estimate the censoring survival function.
This should be equal to "km", "rsf" or "cox" (respectively Kaplan-Meier, 
Random Survival Forests or Cox). Default is "km".}

\item{vars}{A list specifying the variables (indices between 1 and p)
for which variable importance should be investigated. Alternatively, if
set equal to 0, the default, then all variables are investigated.}

\item{alpha}{Miscoverage level for the prediction intervals, i.e., intervals
with coverage 1-alpha are formed. Default for alpha is 0.1.}

\item{mad.train.fun}{A function to perform training on the observed absolute 
residuals R = |min(T,tau) - m(X)| and their associated censoring weights,  
where m denotes the estimator produced by train.fun, to estimate E(R*|X)
for the true absolute residual denoted R*.
This is used to scale the conformal score, to produce a prediction interval
with varying local width. The input arguments to mad.train.fun should be
x: matrix of features, y: vector of observed absolute residuals, and w: 
censoring weights. The default for mad.train.fun is NULL, which means that 
no training is done on the absolute residuals, and the usual (unscaled) 
conformal score is used. Note that if mad.train.fun is non-NULL, then so 
must be mad.predict.fun (see next).}

\item{mad.predict.fun}{A function to perform prediction for the (mean of the)
absolute residuals at new feature values. Its input arguments should be
out: output produced by mad.train.fun, and newx: feature values at which we
want to make predictions. The default for mad.predict.fun is NULL, which
means that no local scaling is done for the conformal score, i.e., the
usual (unscaled) conformal score is used.}

\item{split}{Indices that define the data-split to be used (i.e., the indices
define the first half of the data-split). Note that this split is common
both to conformal.pred.roo.surv (whether already run, or to be run inter-
nally, see below) and the excess error intervals computed by this function.
Default is NULL, in which case the split is chosen randomly.}

\item{seed}{Integer to be passed to set.seed before defining the random 
data-split to be used. Default is NULL, which effectively sets no seed.
If both split and seed are passed, the former takes priority and the latter
is ignored.}

\item{out.roo.surv}{Output from running conformal.pred.roo.surv on the given
data set; default is NULL, which means that conformal.pred.roo.surv will be  
run internally in order to compute in-sample prediction intervals. If  
is NULL, then the data-split common to conformal.pred.roo.surv and this 
out.roo.surv function will be determined by the split or seed arguments. If  
non-NULL, then the common data-split will be determined by that recorded in  
out.roo.surv, and the split and seed arguments will be (silently) ignored.}

\item{verbose}{Should intermediate progress be printed out? Default is FALSE.}
}
\value{
A list with the following components: lo, up, vars, split,
  out.roo. The third component is a list of variables that were tested (i.e.,
  dropped one at a time, to compute excess error). The first two are arrays
  of dimension n x length(vars) x m. The indices used for the half of the 
  data-split are returned in split. Finally, for convenience, the output 
  from running conformal.pred.roo.surv is stored in out.roo.
}
\description{
Compute prediction intervals for the excess test error due to dropping a
  variable, measured in-sample and having asymptotically valid in-sample 
  coverage. Extension to estimators of the restricted mean survival time with 
  right-censored data.
}
\references{
"Distribution-Free Predictive Inference for Regression" by Lei,
  G'Sell, Rinaldo, Tibshirani, Wasserman (2018). See also "A Comprehensive 
  Framework for Evaluating Time to Event Predictions using the Restricted 
  Mean Survival Time" by Cwiling, Perduca, Bouaziz (2023) for the extension
  to right-censored data.
}
